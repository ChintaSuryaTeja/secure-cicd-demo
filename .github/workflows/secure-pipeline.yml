name: Secure CI/CD Demo

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  build_scan_push:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Build Docker image
      - name: Build Docker image
        run: docker build -t local-secure-demo:latest .

      # 3Ô∏è‚É£ Scan image BEFORE pushing
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: local-secure-demo:latest
          format: table
          exit-code: '0'        # Use '1' if you want to fail on vulnerabilities
          severity: 'HIGH,CRITICAL'

      # 4Ô∏è‚É£ Login only if scan is OK
      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      # 5Ô∏è‚É£ Ensure repository exists
      - name: Ensure Docker Hub repository exists
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          USER="${DOCKER_USERNAME}"
          REPO="secure-demo"
          STATUS_CODE=$(curl -s -o response.txt -w "%{http_code}" -u "${USER}:${DOCKER_PASSWORD}" \
            "https://hub.docker.com/v2/repositories/${USER}/${REPO}/" || true)
          if [ "$STATUS_CODE" != "200" ]; then
            echo "Repository not found. Creating..."
            curl -s -X POST -u "${USER}:${DOCKER_PASSWORD}" \
              https://hub.docker.com/v2/repositories/ \
              -H "Content-Type: application/json" \
              -d "{\"name\": \"${REPO}\", \"is_private\": false}" > /dev/null
          fi

      # 6Ô∏è‚É£ Push image to Docker Hub
      - name: Tag and push image to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          docker tag local-secure-demo:latest "$DOCKER_USERNAME/secure-demo:latest"
          docker push "$DOCKER_USERNAME/secure-demo:latest"

      # 7Ô∏è‚É£ Deployment summary
      - name: Deployment Summary
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "‚úÖ Secure CI/CD pipeline completed successfully!"
          echo "üîπ Image pushed: $DOCKER_USERNAME/secure-demo:latest"
